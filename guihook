--// Hook Explorer + Data Decoder (Final Version)

-- Services
local RS = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LP = Players.LocalPlayer

-- Gui Creator
local function CreateWindow(title)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game.CoreGui

    local Main = Instance.new("Frame")
    Main.Size = UDim2.new(0, 400, 0, 300)
    Main.Position = UDim2.new(0.3, 0, 0.2, 0)
    Main.BackgroundColor3 = Color3.fromRGB(25,25,25)
    Main.BorderSizePixel = 0
    Main.Active = true
    Main.Draggable = true
    Main.Parent = ScreenGui

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1,0,0,30)
    Title.BackgroundColor3 = Color3.fromRGB(40,40,40)
    Title.Text = title
    Title.TextColor3 = Color3.fromRGB(255,255,255)
    Title.Font = Enum.Font.SourceSansBold
    Title.TextSize = 18
    Title.Parent = Main

    local Close = Instance.new("TextButton")
    Close.Size = UDim2.new(0,30,0,30)
    Close.Position = UDim2.new(1,-30,0,0)
    Close.Text = "X"
    Close.BackgroundColor3 = Color3.fromRGB(200,50,50)
    Close.TextColor3 = Color3.new(1,1,1)
    Close.Parent = Main

    local Minimize = Instance.new("TextButton")
    Minimize.Size = UDim2.new(0,30,0,30)
    Minimize.Position = UDim2.new(1,-60,0,0)
    Minimize.Text = "-"
    Minimize.BackgroundColor3 = Color3.fromRGB(80,80,80)
    Minimize.TextColor3 = Color3.new(1,1,1)
    Minimize.Parent = Main

    local TabHolder = Instance.new("Frame")
    TabHolder.Size = UDim2.new(1,0,0,30)
    TabHolder.Position = UDim2.new(0,0,0,30)
    TabHolder.BackgroundColor3 = Color3.fromRGB(35,35,35)
    TabHolder.Parent = Main

    local Content = Instance.new("Frame")
    Content.Size = UDim2.new(1,0,1,-60)
    Content.Position = UDim2.new(0,0,0,60)
    Content.BackgroundColor3 = Color3.fromRGB(20,20,20)
    Content.Parent = Main

    return ScreenGui, Main, Content, TabHolder, Close, Minimize
end

-- Utils
local function toString(v)
    if typeof(v) == "table" then
        local s = "{ "
        for k,val in pairs(v) do
            s = s..tostring(k).." = "..toString(val)..", "
        end
        return s.."}"
    else
        return tostring(v)
    end
end

-- Main Window
local GUI, Main, Content, Tabs, Close, Minimize = CreateWindow("Hook Explorer Final")

local RemoteButton = Instance.new("TextButton")
RemoteButton.Size = UDim2.new(0.5,0,1,0)
RemoteButton.Text = "Remote Scanner"
RemoteButton.BackgroundColor3 = Color3.fromRGB(70,70,70)
RemoteButton.TextColor3 = Color3.new(1,1,1)
RemoteButton.Parent = Tabs

local DataButton = Instance.new("TextButton")
DataButton.Size = UDim2.new(0.5,0,1,0)
DataButton.Position = UDim2.new(0.5,0,0,0)
DataButton.Text = "Data Decoder"
DataButton.BackgroundColor3 = Color3.fromRGB(50,50,50)
DataButton.TextColor3 = Color3.new(1,1,1)
DataButton.Parent = Tabs

-- Pages
local RemotePage = Instance.new("ScrollingFrame")
RemotePage.Size = UDim2.new(1,0,1,0)
RemotePage.CanvasSize = UDim2.new(0,0,0,0)
RemotePage.BackgroundTransparency = 1
RemotePage.Visible = true
RemotePage.Parent = Content

local DataPage = Instance.new("ScrollingFrame")
DataPage.Size = UDim2.new(1,0,1,0)
DataPage.CanvasSize = UDim2.new(0,0,0,0)
DataPage.BackgroundTransparency = 1
DataPage.Visible = false
DataPage.Parent = Content

-- Switch tabs
RemoteButton.MouseButton1Click:Connect(function()
    RemotePage.Visible = true
    DataPage.Visible = false
    RemoteButton.BackgroundColor3 = Color3.fromRGB(70,70,70)
    DataButton.BackgroundColor3 = Color3.fromRGB(50,50,50)
end)

DataButton.MouseButton1Click:Connect(function()
    RemotePage.Visible = false
    DataPage.Visible = true
    DataButton.BackgroundColor3 = Color3.fromRGB(70,70,70)
    RemoteButton.BackgroundColor3 = Color3.fromRGB(50,50,50)
end)

-- Close & Minimize
Close.MouseButton1Click:Connect(function() GUI:Destroy() end)
local Minimized = false
Minimize.MouseButton1Click:Connect(function()
    Minimized = not Minimized
    if Minimized then
        Content.Visible = false
        Tabs.Visible = false
        Main.Size = UDim2.new(0,400,0,30)
    else
        Content.Visible = true
        Tabs.Visible = true
        Main.Size = UDim2.new(0,400,0,300)
    end
end)

----------------------------------------------------------------
-- Remote Scanner Tab
----------------------------------------------------------------
local function ScanRemotes()
    RemotePage:ClearAllChildren()
    local y = 0
    local function addRemote(obj)
        local btn = Instance.new("TextLabel")
        btn.Size = UDim2.new(1,0,0,20)
        btn.Position = UDim2.new(0,0,0,y)
        btn.BackgroundColor3 = Color3.fromRGB(45,45,45)
        btn.TextColor3 = Color3.new(1,1,1)
        btn.Text = tostring(obj:GetFullName())
        btn.TextSize = 14
        btn.TextXAlignment = Enum.TextXAlignment.Left
        btn.Parent = RemotePage
        y = y + 22
    end

    for _,desc in ipairs(RS:GetDescendants()) do
        if desc:IsA("RemoteEvent") or desc:IsA("RemoteFunction") then
            addRemote(desc)
        end
    end
    RemotePage.CanvasSize = UDim2.new(0,0,0,y)
end
ScanRemotes()

----------------------------------------------------------------
-- Data Decoder Tab
----------------------------------------------------------------
local function AddLog(remoteType, obj, args)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,0,0,40)
    label.BackgroundColor3 = Color3.fromRGB(35,35,35)
    label.TextColor3 = Color3.new(1,1,1)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextWrapped = true
    label.TextSize = 14
    label.Text = "["..remoteType.."] "..obj:GetFullName().."\nData: "..toString(args)
    label.Parent = DataPage
    DataPage.CanvasSize = UDim2.new(0,0,0,#DataPage:GetChildren()*42)
end

-- Hook all remotes
for _,desc in ipairs(RS:GetDescendants()) do
    if desc:IsA("RemoteEvent") then
        desc.OnClientEvent:Connect(function(...)
            AddLog("RemoteEvent", desc, {...})
        end)
    elseif desc:IsA("RemoteFunction") then
        local old; old = hookfunction(desc.InvokeServer, function(self,...)
            AddLog("RemoteFunction", desc, {...})
            return old(self,...)
        end)
    end
end
