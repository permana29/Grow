-- ðŸ“Œ Remote Explorer + SimpleSpy-Style Sniffer (Final Hybrid)
-- Tabs: Rescan | Data | Sniffer
-- Rescan manual + search; Data = detail remote; Sniffer = realtime code lines
-- Local-only, teks wrap, Copy/Clear OK, filter All/Selected

local Players = game:GetService("Players")
local RS = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

local localPlayer = Players.LocalPlayer

-- =========================
-- Helpers (string & encode)
-- =========================
local function escapeStr(s)
    s = s:gsub("\\","\\\\"):gsub("\n","\\n"):gsub("\t","\\t"):gsub("\r","\\r"):gsub("\"","\\\"")
    return '"'..s..'"'
end

local function shortInstance(inst)
    local ok, path = pcall(function() return inst:GetFullName() end)
    return ok and ("<Instance:"..path..">") or "<Instance>"
end

-- Convert value -> Lua-ish literal (no JSON)
local function toLiteral(v, depth)
    depth = depth or 0
    if depth > 3 then return "<DepthLimit>" end
    local t = typeof(v)
    if t == "string" then
        return escapeStr(v)
    elseif t == "number" or t == "boolean" then
        return tostring(v)
    elseif t == "nil" then
        return "nil"
    elseif t == "Instance" then
        return escapeStr((pcall(function() return v:GetFullName() end) and v:GetFullName()) or tostring(v))
    elseif t == "table" then
        -- try pretty inline table
        local parts, count = {}, 0
        local isArray = true
        local idx = 1
        for k,_ in pairs(v) do
            if k ~= idx then isArray = false end
            idx += 1
        end
        for k,val in pairs(v) do
            count += 1
            if count > 15 then
                table.insert(parts, "...") ; break
            end
            local vv = toLiteral(val, depth+1)
            if isArray then
                table.insert(parts, vv)
            else
                local keyT = typeof(k)
                local key
                if keyT == "string" and k:match("^[%a_][%w_]*$") then
                    key = k
                else
                    key = "["..toLiteral(k, depth+1).."]"
                end
                table.insert(parts, key.." = "..vv)
            end
        end
        return "{ "..table.concat(parts, ", ").." }"
    else
        -- last resort: tostring
        return escapeStr(tostring(v))
    end
end

local function pathOf(inst)
    local ok, s = pcall(function() return inst:GetFullName() end)
    return ok and s or inst.Name
end

-- UI text append helper (auto-wrap + grow)
local function appendLabel(parent, text, color)
    local lbl = Instance.new("TextLabel")
    lbl.Size = UDim2.new(1,-10,0,0)
    lbl.AutomaticSize = Enum.AutomaticSize.Y
    lbl.BackgroundTransparency = 1
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.TextYAlignment = Enum.TextYAlignment.Top
    lbl.TextWrapped = true
    lbl.TextColor3 = color or Color3.new(1,1,1)
    lbl.Font = Enum.Font.Code
    lbl.TextSize = 12
    lbl.Text = text
    lbl.Parent = parent
    parent.CanvasSize = UDim2.new(0,0,0,parent.CanvasSize.Y.Offset + lbl.TextBounds.Y + 8)
    return lbl
end

-- ===============
-- GUI CONSTRUCTOR
-- ===============
local function CreateWindow(title)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Name = "RemoteExplorerHybrid"
    ScreenGui.Parent = game:GetService("CoreGui")

    local Main = Instance.new("Frame")
    Main.Size = UDim2.new(0, 500, 0, 360)
    Main.Position = UDim2.new(0.25, 0, 0.22, 0)
    Main.BackgroundColor3 = Color3.fromRGB(25,25,25)
    Main.Active = true
    Main.Draggable = true
    Main.Parent = ScreenGui

    local Header = Instance.new("TextLabel")
    Header.Size = UDim2.new(1,-80,0,30)
    Header.BackgroundColor3 = Color3.fromRGB(35,35,35)
    Header.Text = title
    Header.TextColor3 = Color3.new(1,1,1)
    Header.Font = Enum.Font.GothamBold
    Header.TextSize = 14
    Header.TextXAlignment = Enum.TextXAlignment.Left
    Header.Parent = Main

    local Minimize = Instance.new("TextButton")
    Minimize.Size = UDim2.new(0,40,0,30)
    Minimize.Position = UDim2.new(1,-80,0,0)
    Minimize.Text = "-"
    Minimize.TextColor3 = Color3.new(1,1,1)
    Minimize.BackgroundColor3 = Color3.fromRGB(60,60,60)
    Minimize.Parent = Main

    local Close = Instance.new("TextButton")
    Close.Size = UDim2.new(0,40,0,30)
    Close.Position = UDim2.new(1,-40,0,0)
    Close.Text = "X"
    Close.TextColor3 = Color3.new(1,1,1)
    Close.BackgroundColor3 = Color3.fromRGB(100,50,50)
    Close.Parent = Main

    local TabBar = Instance.new("Frame")
    TabBar.Size = UDim2.new(1, 0, 0, 25)
    TabBar.Position = UDim2.new(0,0,0,30)
    TabBar.BackgroundColor3 = Color3.fromRGB(30,30,30)
    TabBar.Parent = Main

    local Content = Instance.new("Frame")
    Content.Size = UDim2.new(1,0,1,-55)
    Content.Position = UDim2.new(0,0,0,55)
    Content.BackgroundTransparency = 1
    Content.Parent = Main

    local Tabs = {}
    local CurrentTab

    local function AddTab(name)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(0,100,1,0)
        btn.BackgroundColor3 = Color3.fromRGB(50,50,50)
        btn.Text = name
        btn.TextColor3 = Color3.new(1,1,1)
        btn.Font = Enum.Font.Gotham
        btn.TextSize = 12
        btn.Parent = TabBar

        local page = Instance.new("Frame")
        page.Size = UDim2.new(1,0,1,0)
        page.BackgroundTransparency = 1
        page.Visible = false
        page.Parent = Content

        btn.MouseButton1Click:Connect(function()
            if CurrentTab then CurrentTab.Visible = false end
            page.Visible = true
            CurrentTab = page
        end)

        Tabs[name] = page
        if not CurrentTab then
            CurrentTab = page
            page.Visible = true
        end
        return page
    end

    local minimized = false
    Minimize.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            Content.Visible = false
            TabBar.Visible = false
            Main.Size = UDim2.new(0,500,0,30)
        else
            Content.Visible = true
            TabBar.Visible = true
            Main.Size = UDim2.new(0,500,0,360)
        end
    end)

    Close.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    local function SwitchTab(name)
        if CurrentTab then CurrentTab.Visible = false end
        if Tabs[name] then
            Tabs[name].Visible = true
            CurrentTab = Tabs[name]
        end
    end

    return AddTab, SwitchTab
end

-- ====================
-- Build our 3 main tabs
-- ====================
local AddTab, SwitchTab = CreateWindow("Remote Explorer")

-- Rescan
local ScanTab = AddTab("Rescan")
local Search = Instance.new("TextBox")
Search.Size = UDim2.new(1,-10,0,25)
Search.Position = UDim2.new(0,5,0,5)
Search.PlaceholderText = "Search Remote..."
Search.BackgroundColor3 = Color3.fromRGB(40,40,40)
Search.TextColor3 = Color3.new(1,1,1)
Search.Parent = ScanTab

local RemoteList = Instance.new("ScrollingFrame")
RemoteList.Size = UDim2.new(1,-10,1,-40)
RemoteList.Position = UDim2.new(0,5,0,35)
RemoteList.BackgroundTransparency = 1
RemoteList.ScrollBarThickness = 6
RemoteList.Parent = ScanTab

-- Data
local DataTab = AddTab("Data")
local Toolbar = Instance.new("Frame")
Toolbar.Size = UDim2.new(1,-10,0,25)
Toolbar.Position = UDim2.new(0,5,0,5)
Toolbar.BackgroundColor3 = Color3.fromRGB(35,35,35)
Toolbar.Parent = DataTab

local BackBtn = Instance.new("TextButton")
BackBtn.Size = UDim2.new(0,60,1,0)
BackBtn.Text = "Back"
BackBtn.TextColor3 = Color3.new(1,1,1)
BackBtn.BackgroundColor3 = Color3.fromRGB(70,70,70)
BackBtn.Parent = Toolbar

local CopyBtn = Instance.new("TextButton")
CopyBtn.Size = UDim2.new(0,60,1,0)
CopyBtn.Position = UDim2.new(0,65,0,0)
CopyBtn.Text = "Copy"
CopyBtn.TextColor3 = Color3.new(1,1,1)
CopyBtn.BackgroundColor3 = Color3.fromRGB(70,70,70)
CopyBtn.Parent = Toolbar

local ClearBtn = Instance.new("TextButton")
ClearBtn.Size = UDim2.new(0,60,1,0)
ClearBtn.Position = UDim2.new(0,130,0,0)
ClearBtn.Text = "Clear"
ClearBtn.TextColor3 = Color3.new(1,1,1)
ClearBtn.BackgroundColor3 = Color3.fromRGB(70,50,50)
ClearBtn.Parent = Toolbar

local DataLog = Instance.new("ScrollingFrame")
DataLog.Size = UDim2.new(1,-10,1,-40)
DataLog.Position = UDim2.new(0,5,0,35)
DataLog.BackgroundTransparency = 1
DataLog.ScrollBarThickness = 6
DataLog.Parent = DataTab

-- Sniffer
local SniffTab = AddTab("Sniffer")
local SnToolbar = Instance.new("Frame")
SnToolbar.Size = UDim2.new(1,-10,0,25)
SnToolbar.Position = UDim2.new(0,5,0,5)
SnToolbar.BackgroundColor3 = Color3.fromRGB(35,35,35)
SnToolbar.Parent = SniffTab

local FollowBtn = Instance.new("TextButton")
FollowBtn.Size = UDim2.new(0,110,1,0)
FollowBtn.Text = "Filter: All"
FollowBtn.TextColor3 = Color3.new(1,1,1)
FollowBtn.BackgroundColor3 = Color3.fromRGB(70,70,70)
FollowBtn.Parent = SnToolbar

local SnCopyBtn = Instance.new("TextButton")
SnCopyBtn.Size = UDim2.new(0,60,1,0)
SnCopyBtn.Position = UDim2.new(0,115,0,0)
SnCopyBtn.Text = "Copy"
SnCopyBtn.TextColor3 = Color3.new(1,1,1)
SnCopyBtn.BackgroundColor3 = Color3.fromRGB(70,70,70)
SnCopyBtn.Parent = SnToolbar

local SnClearBtn = Instance.new("TextButton")
SnClearBtn.Size = UDim2.new(0,60,1,0)
SnClearBtn.Position = UDim2.new(0,180,0,0)
SnClearBtn.Text = "Clear"
SnClearBtn.TextColor3 = Color3.new(1,1,1)
SnClearBtn.BackgroundColor3 = Color3.fromRGB(70,50,50)
SnClearBtn.Parent = SnToolbar

local SniffLog = Instance.new("ScrollingFrame")
SniffLog.Size = UDim2.new(1,-10,1,-40)
SniffLog.Position = UDim2.new(0,5,0,35)
SniffLog.BackgroundTransparency = 1
SniffLog.ScrollBarThickness = 6
SniffLog.Parent = SniffTab

-- =====================
-- State & core behaviors
-- =====================
local CurrentRemote = nil
local DataLines = {}
local SniffLines = {}
local followSelectedOnly = false

local function setClipboardSafe(text)
    if typeof(setclipboard) == "function" then
        pcall(function() setclipboard(text) end)
    end
end

local function showRemote(remote)
    DataLog:ClearAllChildren()
    DataLog.CanvasSize = UDim2.new(0,0,0,0)
    DataLines = {}
    CurrentRemote = remote

    local lines = {}
    table.insert(lines, "Name: "..remote.Name)
    table.insert(lines, "Class: "..remote.ClassName)
    table.insert(lines, "Path: "..pathOf(remote))
    table.insert(lines, "")
    table.insert(lines, "Properties:")
    for _,prop in ipairs({"Archivable","Name","ClassName","Parent"}) do
        local ok,val = pcall(function() return tostring(remote[prop]) end)
        if ok then table.insert(lines, "  "..prop..": "..val) end
    end

    local text = table.concat(lines, "\n")
    table.insert(DataLines, text)
    appendLabel(DataLog, text, Color3.new(1,1,0.7))
end

-- Buttons Data
BackBtn.MouseButton1Click:Connect(function()
    SwitchTab("Rescan")
end)

CopyBtn.MouseButton1Click:Connect(function()
    if #DataLines > 0 then
        setClipboardSafe(table.concat(DataLines, "\n"))
    end
end)

ClearBtn.MouseButton1Click:Connect(function()
    DataLines = {}
    DataLog:ClearAllChildren()
    DataLog.CanvasSize = UDim2.new(0,0,0,0)
end)

-- Buttons Sniffer
FollowBtn.MouseButton1Click:Connect(function()
    followSelectedOnly = not followSelectedOnly
    FollowBtn.Text = followSelectedOnly and "Filter: Selected" or "Filter: All"
end)

SnCopyBtn.MouseButton1Click:Connect(function()
    if #SniffLines > 0 then
        setClipboardSafe(table.concat(SniffLines, "\n"))
    end
end)

SnClearBtn.MouseButton1Click:Connect(function()
    SniffLines = {}
    SniffLog:ClearAllChildren()
    SniffLog.CanvasSize = UDim2.new(0,0,0,0)
end)

-- Refresh list
local function RefreshRemotes()
    RemoteList:ClearAllChildren()
    local y = 0
    for _,v in ipairs(RS:GetDescendants()) do
        if v:IsA("RemoteEvent") or v:IsA("RemoteFunction") then
            if Search.Text == "" or v.Name:lower():find(Search.Text:lower()) then
                local Btn = Instance.new("TextButton")
                Btn.Size = UDim2.new(1,-10,0,25)
                Btn.Position = UDim2.new(0,5,0,y)
                Btn.BackgroundColor3 = Color3.fromRGB(50,50,50)
                Btn.TextColor3 = Color3.new(1,1,1)
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                Btn.Text = v:GetFullName()
                Btn.Parent = RemoteList

                Btn.MouseButton1Click:Connect(function()
                    showRemote(v)
                    SwitchTab("Data")
                end)

                y += 30
            end
        end
    end
    RemoteList.CanvasSize = UDim2.new(0,0,0,y)
end

Search:GetPropertyChangedSignal("Text"):Connect(RefreshRemotes)
RefreshRemotes()

-- ====================
-- SimpleSpy-style hook
-- ====================
local function logSniff(remote, method, args)
    -- filter by selection if needed
    if followSelectedOnly and remote ~= CurrentRemote then return end

    -- build "RemoteName :FireServer(a, b)"
    local call = remote.Name.." :"..method.."("
    local alist = {}
    for i=1, select("#", args) do
        table.insert(alist, toLiteral(select(i, args)))
    end
    call = call .. table.concat(alist, ", ") .. ")"

    -- include path comment for clarity
    local line = "["..remote.ClassName.."] "..call.."  -- "..pathOf(remote)
    table.insert(SniffLines, line)
    appendLabel(SniffLog, line)
end

-- __namecall (outgoing FireServer/InvokeServer)
do
    local okHM, oldNamecall = pcall(function() return hookmetamethod(game, "__namecall", function() end) end)
    if okHM then
        oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
            local methodOk, method = pcall(getnamecallmethod)
            local args = {...}
            -- try/catch around logging
            if methodOk and self and (self:IsA("RemoteEvent") or self:IsA("RemoteFunction")) then
                if method == "FireServer" or method == "InvokeServer" then
                    pcall(function() logSniff(self, method, args) end)
                end
            end
            return oldNamecall(self, ...)
        end)
    else
        -- fallback: best effort (no outgoing hook)
        appendLabel(SniffLog, "-- __namecall hook tidak tersedia di eksekutor, log outgoing terbatas --", Color3.fromRGB(1,0.8,0.2))
    end
end

-- Optional: incoming logs (OnClientEvent)
for _,v in ipairs(RS:GetDescendants()) do
    if v:IsA("RemoteEvent") then
        v.OnClientEvent:Connect(function(...)
            local args = {...}
            pcall(function()
                if (not followSelectedOnly) or v == CurrentRemote then
                    local call = v.Name.." :OnClientEvent("
                    local al = {}
                    for i=1, select("#", ...) do
                        table.insert(al, toLiteral(select(i, ...)))
                    end
                    call = call..table.concat(al,", ")..")"
                    local line = "["..v.ClassName.."] "..call.."  -- "..pathOf(v)
                    table.insert(SniffLines, line)
                    appendLabel(SniffLog, line, Color3.fromRGB(0.8,0.95,1))
                end
            end)
        end)
    end
end

-- Initial hint
appendLabel(SniffLog, "-- Sniffer siap. Lakukan aksi di game (beli/claim/dll) untuk melihat :FireServer/:InvokeServer realtime. --", Color3.fromRGB(0.8,0.8,0.8))
appendLabel(SniffLog, "-- Gunakan tombol 'Filter: Selected' agar hanya menampilkan remote yang dipilih di tab Data. --", Color3.fromRGB(0.8,0.8,0.8))
