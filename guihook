-- 📌 Remote Explorer (Final + Sniffer Realtime)
-- GUI tetap seperti versi final kamu, hanya ditambah sniffer & perbaikan rendering teks

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

----------------------------------------------------------------
-- Safe decode untuk preview argumen
local function safeDecode(v, depth)
	depth = depth or 0
	if depth > 3 then return "<Max Depth>" end

	local t = typeof(v)
	if t == "string" then
		return '"'..v..'"'
	elseif t == "number" or t == "boolean" then
		return tostring(v)
	elseif t == "Instance" then
		return v:GetFullName()
	elseif t == "Vector3" or t == "Vector2" or t == "CFrame" or t == "Color3" or t == "UDim2" then
		local ok, s = pcall(tostring, v)
		return ok and s or ("<"..t..">")
	elseif t == "table" then
		local ok, s = pcall(HttpService.JSONEncode, HttpService, v)
		return ok and s or "<Table>"
	else
		return tostring(v)
	end
end

----------------------------------------------------------------
-- GUI Builder (as is)
local function CreateWindow(title)
	local ScreenGui = Instance.new("ScreenGui")
	ScreenGui.IgnoreGuiInset = true
	ScreenGui.ResetOnSpawn = false
	ScreenGui.Parent = game.CoreGui

	local Main = Instance.new("Frame")
	Main.Size = UDim2.new(0, 500, 0, 320)
	Main.Position = UDim2.new(0.25, 0, 0.25, 0)
	Main.BackgroundColor3 = Color3.fromRGB(25,25,25)
	Main.BorderSizePixel = 0
	Main.Active, Main.Draggable = true, true
	Main.Parent = ScreenGui

	local Header = Instance.new("TextLabel")
	Header.Size = UDim2.new(1, -80, 0, 30)
	Header.BackgroundColor3 = Color3.fromRGB(35,35,35)
	Header.Text = title
	Header.TextColor3 = Color3.fromRGB(255,255,255)
	Header.Font = Enum.Font.GothamBold
	Header.TextSize = 14
	Header.TextXAlignment = Enum.TextXAlignment.Left
	Header.BorderSizePixel = 0
	Header.Parent = Main

	local TabBar = Instance.new("Frame")
	TabBar.Size = UDim2.new(1, 0, 0, 25)
	TabBar.Position = UDim2.new(0,0,0,30)
	TabBar.BackgroundColor3 = Color3.fromRGB(30,30,30)
	TabBar.BorderSizePixel = 0
	TabBar.Parent = Main

	local Content = Instance.new("Frame")
	Content.Size = UDim2.new(1,0,1,-55)
	Content.Position = UDim2.new(0,0,0,55)
	Content.BackgroundTransparency = 1
	Content.Parent = Main

	local Minimize = Instance.new("TextButton")
	Minimize.Size = UDim2.new(0,40,0,30)
	Minimize.Position = UDim2.new(1,-80,0,0)
	Minimize.Text = "-"
	Minimize.TextColor3 = Color3.new(1,1,1)
	Minimize.BackgroundColor3 = Color3.fromRGB(60,60,60)
	Minimize.Parent = Main

	local Close = Instance.new("TextButton")
	Close.Size = UDim2.new(0,40,0,30)
	Close.Position = UDim2.new(1,-40,0,0)
	Close.Text = "X"
	Close.TextColor3 = Color3.new(1,1,1)
	Close.BackgroundColor3 = Color3.fromRGB(100,50,50)
	Close.Parent = Main

	local Tabs, CurrentTab = {}, nil
	local function AddTab(name)
		local Button = Instance.new("TextButton")
		Button.Size = UDim2.new(0,100,1,0)
		Button.BackgroundColor3 = Color3.fromRGB(50,50,50)
		Button.Text = name
		Button.TextColor3 = Color3.new(1,1,1)
		Button.Font = Enum.Font.Gotham
		Button.TextSize = 12
		Button.Parent = TabBar

		local Page = Instance.new("Frame")
		Page.Size = UDim2.new(1,0,1,0)
		Page.BackgroundTransparency = 1
		Page.Visible = false
		Page.Parent = Content

		Button.MouseButton1Click:Connect(function()
			if CurrentTab then CurrentTab.Visible = false end
			Page.Visible = true
			CurrentTab = Page
		end)

		Tabs[name] = Page
		if not CurrentTab then
			CurrentTab = Page
			Page.Visible = true
		end
		return Page
	end

	local Minimized = false
	Minimize.MouseButton1Click:Connect(function()
		Minimized = not Minimized
		if Minimized then
			Content.Visible = false
			TabBar.Visible = false
			Main.Size = UDim2.new(0,500,0,30)
		else
			Content.Visible = true
			TabBar.Visible = true
			Main.Size = UDim2.new(0,500,0,320)
		end
	end)

	Close.MouseButton1Click:Connect(function() ScreenGui:Destroy() end)

	return AddTab, Tabs, function(tabName)
		if CurrentTab then CurrentTab.Visible = false end
		if Tabs[tabName] then
			Tabs[tabName].Visible = true
			CurrentTab = Tabs[tabName]
		end
	end
end

----------------------------------------------------------------
-- Window + Tabs
local AddTab, Tabs, SwitchTab = CreateWindow("Remote Explorer")

-- Rescan Tab
local ScanTab = AddTab("Rescan")
local Search = Instance.new("TextBox", ScanTab)
Search.Size = UDim2.new(1,-10,0,25)
Search.Position = UDim2.new(0,5,0,5)
Search.PlaceholderText = "Search Remote..."
Search.BackgroundColor3 = Color3.fromRGB(40,40,40)
Search.TextColor3 = Color3.new(1,1,1)

local RemoteList = Instance.new("ScrollingFrame", ScanTab)
RemoteList.Size = UDim2.new(1,-10,1,-40)
RemoteList.Position = UDim2.new(0,5,0,35)
RemoteList.BackgroundTransparency = 1
RemoteList.ScrollBarThickness = 6
RemoteList.CanvasSize = UDim2.new()

-- Data Tab
local DataTab = AddTab("Data")
local Toolbar = Instance.new("Frame", DataTab)
Toolbar.Size = UDim2.new(1,-10,0,25)
Toolbar.Position = UDim2.new(0,5,0,5)
Toolbar.BackgroundColor3 = Color3.fromRGB(35,35,35)

local BackBtn = Instance.new("TextButton", Toolbar)
BackBtn.Size = UDim2.new(0,60,1,0)
BackBtn.Text = "Back"
BackBtn.TextColor3 = Color3.new(1,1,1)
BackBtn.BackgroundColor3 = Color3.fromRGB(70,70,70)

local CopyBtn = Instance.new("TextButton", Toolbar)
CopyBtn.Size = UDim2.new(0,60,1,0)
CopyBtn.Position = UDim2.new(0,65,0,0)
CopyBtn.Text = "Copy"
CopyBtn.TextColor3 = Color3.new(1,1,1)
CopyBtn.BackgroundColor3 = Color3.fromRGB(70,70,70)

local ClearBtn = Instance.new("TextButton", Toolbar)
ClearBtn.Size = UDim2.new(0,60,1,0)
ClearBtn.Position = UDim2.new(0,130,0,0)
ClearBtn.Text = "Clear"
ClearBtn.TextColor3 = Color3.new(1,1,1)
ClearBtn.BackgroundColor3 = Color3.fromRGB(70,50,50)

local DataLog = Instance.new("ScrollingFrame", DataTab)
DataLog.Size = UDim2.new(1,-10,1,-40)
DataLog.Position = UDim2.new(0,5,0,35)
DataLog.BackgroundTransparency = 1
DataLog.ScrollBarThickness = 6

-- Container buat teks (anti numpuk)
local DataLogContent = Instance.new("Frame", DataLog)
DataLogContent.BackgroundTransparency = 1
DataLogContent.Size = UDim2.new(1,-10,0,0)
DataLogContent.Position = UDim2.new(0,5,0,0)

local ListLayout = Instance.new("UIListLayout", DataLogContent)
ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
ListLayout.Padding = UDim.new(0,6)

local function updateCanvas()
	DataLog.CanvasSize = UDim2.new(0,0,0, ListLayout.AbsoluteContentSize.Y + 10)
end
ListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvas)

----------------------------------------------------------------
-- Logging util
local Logs = {}
local function addLine(text)
	table.insert(Logs, text)
	local L = Instance.new("TextLabel")
	L.Size = UDim2.new(1,0,0,0)
	L.AutomaticSize = Enum.AutomaticSize.Y
	L.BackgroundTransparency = 1
	L.TextXAlignment = Enum.TextXAlignment.Left
	L.TextYAlignment = Enum.TextYAlignment.Top
	L.TextWrapped = true
	L.TextColor3 = Color3.new(1,1,1)
	L.Font = Enum.Font.Code
	L.TextSize = 12
	L.Text = text
	L.Parent = DataLogContent
end

local function clearLog()
	table.clear(Logs)
	DataLogContent:ClearAllChildren()
end

----------------------------------------------------------------
-- Sniffer storage
local selectedRemote = nil
local historyByRemote = setmetatable({}, {__mode = "k"}) -- weak keys
local MAX_HISTORY = 200

local function pushHistory(remote, direction, method, argsTbl)
	local h = historyByRemote[remote]
	if not h then h = {}; historyByRemote[remote] = h end
	table.insert(h, {
		t = tick(),
		dir = direction,
		method = method,
		args = argsTbl
	})
	if #h > MAX_HISTORY then table.remove(h, 1) end

	if selectedRemote == remote then
		addLine(string.format("[%0.2f] %s %s %s",
			os.clock(), direction, method, HttpService:JSONEncode(argsTbl)))
	end
end

----------------------------------------------------------------
-- Show selected remote (info + replay history)
local function ShowRemote(remote)
	clearLog()
	selectedRemote = remote

	-- header info
	addLine("Name: "..remote.Name)
	addLine("Class: "..remote.ClassName)
	addLine("Path: "..remote:GetFullName())
	addLine("")
	addLine("Properties:")
	for _,prop in ipairs({"Archivable","Name","ClassName","Parent"}) do
		local ok,val = pcall(function() return tostring(remote[prop]) end)
		if ok then addLine("  "..prop..": "..val) end
	end
	addLine("")
	addLine("-- Sniffer Attached --")

	-- replay history sebelumnya
	local h = historyByRemote[remote]
	if h and #h > 0 then
		addLine("")
		addLine("-- History --")
		for _,e in ipairs(h) do
			local okJson, json = pcall(HttpService.JSONEncode, HttpService, e.args)
			addLine(string.format("[%0.2f] %s %s %s", e.t % 100000, e.dir, e.method, okJson and json or "<args>"))
		end
	end
end

----------------------------------------------------------------
-- Buttons
BackBtn.MouseButton1Click:Connect(function()
	selectedRemote = nil
	SwitchTab("Rescan")
end)

CopyBtn.MouseButton1Click:Connect(function()
	if #Logs > 0 and setclipboard then
		setclipboard(table.concat(Logs, "\n"))
	end
end)

ClearBtn.MouseButton1Click:Connect(function()
	clearLog()
end)

----------------------------------------------------------------
-- Scan remotes (seluruh game, bukan cuma RS)
local function isRemote(inst)
	return inst:IsA("RemoteEvent") or inst:IsA("RemoteFunction")
end

local function RefreshRemotes()
	RemoteList:ClearAllChildren()
	local y = 0
	for _,v in ipairs(game:GetDescendants()) do
		if isRemote(v) then
			if Search.Text == "" or v.Name:lower():find(Search.Text:lower()) then
				local Btn = Instance.new("TextButton")
				Btn.Size = UDim2.new(1,-10,0,25)
				Btn.Position = UDim2.new(0,5,0,y)
				Btn.BackgroundColor3 = Color3.fromRGB(50,50,50)
				Btn.TextColor3 = Color3.new(1,1,1)
				Btn.Text = v:GetFullName()
				Btn.Parent = RemoteList

				Btn.MouseButton1Click:Connect(function()
					ShowRemote(v)
					SwitchTab("Data")
				end)
				y = y + 30
			end
		end
	end
	RemoteList.CanvasSize = UDim2.new(0,0,0,y)
end

Search:GetPropertyChangedSignal("Text"):Connect(RefreshRemotes)

----------------------------------------------------------------
-- Attach sniffer
local function attachServerToClientSniff(re)
	-- catat OnClientEvent (Server -> Client)
	if re:IsA("RemoteEvent") then
		re.OnClientEvent:Connect(function(...)
			local raw = {...}
			local pretty = {}
			for i,a in ipairs(raw) do pretty[i] = safeDecode(a) end
			pushHistory(re, "Server->Client", "OnClientEvent", pretty)
		end)
	end
end

-- pasang ke semua RemoteEvent yang ada sekarang
for _,inst in ipairs(game:GetDescendants()) do
	if inst:IsA("RemoteEvent") then
		attachServerToClientSniff(inst)
	end
end

-- kalau ada remote baru
game.DescendantAdded:Connect(function(inst)
	if inst:IsA("RemoteEvent") then
		attachServerToClientSniff(inst)
	end
end)

-- hook Client->Server (FireServer / InvokeServer)
do
	local okMT, mt = pcall(getrawmetatable, game)
	local okRO = okMT and setreadonly
	local okGN = getnamecallmethod ~= nil
	if okMT and okRO and okGN then
		okRO(mt, false)
		local old = mt.__namecall
		mt.__namecall = function(self, ...)
			local m = getnamecallmethod()
			if typeof(self) == "Instance" and isRemote(self) then
				if (self:IsA("RemoteEvent") and m == "FireServer")
					or (self:IsA("RemoteFunction") and m == "InvokeServer") then
					local raw = {...}
					local pretty = {}
					for i,a in ipairs(raw) do pretty[i] = safeDecode(a) end
					pushHistory(self, "Client->Server", m, pretty)
				end
			end
			return old(self, ...)
		end
		okRO(mt, true)
	else
		-- executor tidak support hook; tetap jalan tanpa Client->Server sniff
		addLine("[WARN] Executor tidak mendukung __namecall hook; hanya OnClientEvent yang dicatat.")
	end
end

----------------------------------------------------------------
-- Start
RefreshRemotes()
SwitchTab("Rescan")
```0
