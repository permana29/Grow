-- Remote Explorer Final with Log Data
local HttpService = game:GetService("HttpService")

-- UI Setup
local screenGui = Instance.new("ScreenGui", game.CoreGui)
screenGui.Name = "RemoteExplorer"

local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 500, 0, 350)
frame.Position = UDim2.new(0.5, -250, 0.5, -175)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.Active = true
frame.Draggable = true

local title = Instance.new("TextLabel", frame)
title.Size = UDim2.new(1, -40, 0, 30)
title.Position = UDim2.new(0, 10, 0, 5)
title.BackgroundTransparency = 1
title.Text = "Remote Explorer"
title.TextColor3 = Color3.new(1,1,1)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 20
title.TextXAlignment = Enum.TextXAlignment.Left

-- Close & Minimize
local closeBtn = Instance.new("TextButton", frame)
closeBtn.Size = UDim2.new(0,30,0,30)
closeBtn.Position = UDim2.new(1,-35,0,5)
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.new(1,0,0)
closeBtn.BackgroundTransparency = 1

local minimizeBtn = Instance.new("TextButton", frame)
minimizeBtn.Size = UDim2.new(0,30,0,30)
minimizeBtn.Position = UDim2.new(1,-70,0,5)
minimizeBtn.Text = "-"
minimizeBtn.TextColor3 = Color3.new(1,1,1)
minimizeBtn.BackgroundTransparency = 1

-- Tabs
local tabFrame = Instance.new("Frame", frame)
tabFrame.Size = UDim2.new(1,0,0,30)
tabFrame.Position = UDim2.new(0,0,0,40)
tabFrame.BackgroundColor3 = Color3.fromRGB(40,40,40)

local dataTab = Instance.new("TextButton", tabFrame)
dataTab.Size = UDim2.new(0,80,1,0)
dataTab.Position = UDim2.new(0,5,0,0)
dataTab.Text = "Data"
dataTab.TextColor3 = Color3.new(1,1,1)
dataTab.BackgroundTransparency = 1

-- Container
local content = Instance.new("ScrollingFrame", frame)
content.Size = UDim2.new(1,-20,1,-80)
content.Position = UDim2.new(0,10,0,75)
content.CanvasSize = UDim2.new(0,0,0,0)
content.BackgroundColor3 = Color3.fromRGB(20,20,20)
content.BorderSizePixel = 0
content.AutomaticCanvasSize = Enum.AutomaticSize.Y
content.ScrollBarThickness = 6

local dataLabel = Instance.new("TextLabel", content)
dataLabel.Size = UDim2.new(1,-10,0,20)
dataLabel.Position = UDim2.new(0,5,0,5)
dataLabel.BackgroundTransparency = 1
dataLabel.TextColor3 = Color3.new(1,1,1)
dataLabel.Font = Enum.Font.Code
dataLabel.TextSize = 16
dataLabel.TextXAlignment = Enum.TextXAlignment.Left
dataLabel.TextYAlignment = Enum.TextYAlignment.Top
dataLabel.TextWrapped = true
dataLabel.Text = "Menunggu scan..."
dataLabel.AutomaticSize = Enum.AutomaticSize.Y

-- Buttons
local backBtn = Instance.new("TextButton", frame)
backBtn.Size = UDim2.new(0,80,0,30)
backBtn.Position = UDim2.new(0,10,1,-35)
backBtn.Text = "< Back"
backBtn.BackgroundColor3 = Color3.fromRGB(60,60,60)
backBtn.TextColor3 = Color3.new(1,1,1)

local copyBtn = Instance.new("TextButton", frame)
copyBtn.Size = UDim2.new(0,80,0,30)
copyBtn.Position = UDim2.new(0,100,1,-35)
copyBtn.Text = "Copy"
copyBtn.BackgroundColor3 = Color3.fromRGB(60,60,60)
copyBtn.TextColor3 = Color3.new(1,1,1)

local clearBtn = Instance.new("TextButton", frame)
clearBtn.Size = UDim2.new(0,80,0,30)
clearBtn.Position = UDim2.new(0,190,1,-35)
clearBtn.Text = "Clear"
clearBtn.BackgroundColor3 = Color3.fromRGB(80,40,40)
clearBtn.TextColor3 = Color3.new(1,1,1)

-- Functions
local scannedRemotes = {}
local logs = {}

local function safeToString(v)
    local s
    pcall(function() s = tostring(v) end)
    if not s or s == "" then
        s = "Data tidak terbaca"
    end
    return s
end

local function formatRemote(r)
    local info = ""
    info = info.."Name: "..r.Name.."\n"
    info = info.."Class: "..r.ClassName.."\n"
    info = info.."Path: "..r:GetFullName().."\n\n"
    info = info.."Properties:\n"
    info = info.." Archivable: "..tostring(r.Archivable).."\n"
    info = info.." Name: "..r.Name.."\n"
    info = info.." ClassName: "..r.ClassName.."\n"
    info = info.." Parent: "..(r.Parent and r.Parent.Name or "nil").."\n"
    info = info.."----------------------------\n"

    if logs[r] and #logs[r] > 0 then
        info = info.."ðŸ“¥ Log Data:\n"
        for _, args in ipairs(logs[r]) do
            for i, v in ipairs(args) do
                info = info.."- Arg["..i.."]: "..safeToString(v).."\n"
            end
            info = info.."----------------------------\n"
        end
    end

    return info
end

local currentRemote = nil

local function showRemote(r)
    currentRemote = r
    dataLabel.Text = formatRemote(r)
end

-- Hook remotes
local function hookRemote(r)
    if r.ClassName == "RemoteEvent" then
        local old = r.FireServer
        r.FireServer = function(self,...)
            local args = {...}
            logs[self] = logs[self] or {}
            table.insert(logs[self], args)
            if self == currentRemote then
                dataLabel.Text = formatRemote(self)
            end
            return old(self,...)
        end
    elseif r.ClassName == "RemoteFunction" then
        local old = r.InvokeServer
        r.InvokeServer = function(self,...)
            local args = {...}
            logs[self] = logs[self] or {}
            table.insert(logs[self], args)
            if self == currentRemote then
                dataLabel.Text = formatRemote(self)
            end
            return old(self,...)
        end
    end
end

-- Scan
local function scan()
    for _, r in ipairs(game:GetDescendants()) do
        if (r:IsA("RemoteEvent") or r:IsA("RemoteFunction")) and not scannedRemotes[r] then
            scannedRemotes[r] = true
            hookRemote(r)
        end
    end
end

-- Connections
closeBtn.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

minimizeBtn.MouseButton1Click:Connect(function()
    frame.Visible = not frame.Visible
end)

backBtn.MouseButton1Click:Connect(function()
    dataLabel.Text = "Menunggu scan..."
    currentRemote = nil
end)

copyBtn.MouseButton1Click:Connect(function()
    if currentRemote then
        setclipboard(formatRemote(currentRemote))
    end
end)

clearBtn.MouseButton1Click:Connect(function()
    logs = {}
    dataLabel.Text = "Log cleared!"
end)

-- Run scan
scan()
game.DescendantAdded:Connect(function(obj)
    if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
        scan()
    end
end)
