-- Remote Explorer (Local Only, Final)
-- - Logs outbound only (FireServer / InvokeServer)
-- - Human-readable args (no JSON)
-- - Rescan <-> Data, Back, Minimize, Close
-- - Realtime remote list, Copy, Clear, Auto-scroll

-- ====== Services ======
local Players = game:GetService("Players")
local RS = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer

-- ====== Safe helpers ======
local function safe(t, f, ...)
    local ok, res = pcall(f, ...)
    if ok then return res end
    return t
end

local function has(x) return x ~= nil end

-- Human-readable, depth/length limited (no JSON)
local function brief(v, depth, seen)
    depth = depth or 0
    if depth > 2 then return "<…>" end
    local tv = typeof(v)

    if tv == "string" then
        if #v > 200 then
            return '"' .. v:sub(1,200) .. '…"'
        end
        return '"' .. v .. '"'
    elseif tv == "number" or tv == "boolean" then
        return tostring(v)
    elseif tv == "Instance" then
        return safe("<Instance>", function() return v:GetFullName() end)
    elseif tv == "Vector3" or tv == "Vector2" or tv == "CFrame" or tv == "UDim2" or tv == "UDim" or tv == "Color3" then
        return tostring(v)
    elseif tv == "table" then
        seen = seen or {}
        if seen[v] then return "{<cycle>}" end
        seen[v] = true
        local parts, n = {}, 0
        for k,val in pairs(v) do
            n += 1
            if n > 10 then
                table.insert(parts, "…")
                break
            end
            local key = "[" .. brief(k, depth+1, seen) .. "]"
            local valb = brief(val, depth+1, seen)
            table.insert(parts, key .. "=" .. valb)
        end
        return "{" .. table.concat(parts, ", ") .. "}"
    else
        return tostring(v)
    end
end

-- ====== GUI ======
local function CreateWindow(title)
    local gui = Instance.new("ScreenGui")
    gui.Name = "RemoteExplorer_LocalOnly"
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.Parent = game.CoreGui

    local Main = Instance.new("Frame")
    Main.Size = UDim2.new(0, 380, 0, 260)
    Main.Position = UDim2.new(0.35, 0, 0.3, 0)
    Main.BackgroundColor3 = Color3.fromRGB(25,25,25)
    Main.Active, Main.Draggable = true, true
    Main.Parent = gui

    local Header = Instance.new("TextLabel")
    Header.Size = UDim2.new(1, -80, 0, 30)
    Header.BackgroundColor3 = Color3.fromRGB(35,35,35)
    Header.Text = title
    Header.TextColor3 = Color3.fromRGB(255,255,255)
    Header.Font = Enum.Font.GothamBold
    Header.TextSize = 14
    Header.TextXAlignment = Enum.TextXAlignment.Left
    Header.Parent = Main

    local MinBtn = Instance.new("TextButton")
    MinBtn.Size = UDim2.new(0, 40, 0, 30)
    MinBtn.Position = UDim2.new(1, -80, 0, 0)
    MinBtn.Text = "-"
    MinBtn.TextColor3 = Color3.fromRGB(255,255,255)
    MinBtn.BackgroundColor3 = Color3.fromRGB(60,60,60)
    MinBtn.Parent = Main

    local CloseBtn = Instance.new("TextButton")
    CloseBtn.Size = UDim2.new(0, 40, 0, 30)
    CloseBtn.Position = UDim2.new(1, -40, 0, 0)
    CloseBtn.Text = "X"
    CloseBtn.TextColor3 = Color3.fromRGB(255,255,255)
    CloseBtn.BackgroundColor3 = Color3.fromRGB(100,50,50)
    CloseBtn.Parent = Main

    local TabBar = Instance.new("Frame")
    TabBar.Size = UDim2.new(1, 0, 0, 25)
    TabBar.Position = UDim2.new(0, 0, 0, 30)
    TabBar.BackgroundColor3 = Color3.fromRGB(30,30,30)
    TabBar.Parent = Main

    local Content = Instance.new("Frame")
    Content.Size = UDim2.new(1, 0, 1, -55)
    Content.Position = UDim2.new(0, 0, 0, 55)
    Content.BackgroundTransparency = 1
    Content.Parent = Main

    local Tabs, CurrentTab = {}, nil
    local function AddTab(name)
        local Btn = Instance.new("TextButton")
        Btn.Size = UDim2.new(0, 100, 1, 0)
        Btn.BackgroundColor3 = Color3.fromRGB(50,50,50)
        Btn.Text = name
        Btn.TextColor3 = Color3.fromRGB(255,255,255)
        Btn.Font = Enum.Font.Gotham
        Btn.TextSize = 12
        Btn.Parent = TabBar

        local Page = Instance.new("Frame")
        Page.Size = UDim2.new(1, 0, 1, 0)
        Page.BackgroundTransparency = 1
        Page.Visible = false
        Page.Parent = Content

        Btn.MouseButton1Click:Connect(function()
            if CurrentTab then CurrentTab.Visible = false end
            Page.Visible = true
            CurrentTab = Page
        end)

        Tabs[name] = Page
        if not CurrentTab then
            CurrentTab = Page
            Page.Visible = true
        end

        return Page
    end

    local minimized = false
    MinBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        TabBar.Visible = not minimized
        Content.Visible = not minimized
        Main.Size = minimized and UDim2.new(0, 380, 0, 30) or UDim2.new(0, 380, 0, 260)
    end)

    CloseBtn.MouseButton1Click:Connect(function()
        gui:Destroy()
    end)

    return AddTab, Tabs
end

local AddTab, Tabs = CreateWindow("Remote Explorer (Local)")

-- ====== Rescan Tab ======
local ScanTab = AddTab("Rescan")

local Search = Instance.new("TextBox")
Search.Size = UDim2.new(1, -10, 0, 25)
Search.Position = UDim2.new(0, 5, 0, 5)
Search.PlaceholderText = "Search Remote..."
Search.BackgroundColor3 = Color3.fromRGB(40,40,40)
Search.TextColor3 = Color3.fromRGB(255,255,255)
Search.ClearTextOnFocus = false
Search.Parent = ScanTab

local RemoteList = Instance.new("ScrollingFrame")
RemoteList.Size = UDim2.new(1, -10, 1, -40)
RemoteList.Position = UDim2.new(0, 5, 0, 35)
RemoteList.BackgroundTransparency = 1
RemoteList.ScrollBarThickness = 6
RemoteList.Parent = ScanTab

local UIList = Instance.new("UIListLayout")
UIList.Padding = UDim.new(0, 5)
UIList.SortOrder = Enum.SortOrder.LayoutOrder
UIList.Parent = RemoteList

-- Keep a local cache of remotes
local Remotes = {}

local function rebuildRemoteCache()
    table.clear(Remotes)
    for _, d in ipairs(RS:GetDescendants()) do
        if d:IsA("RemoteEvent") or d:IsA("RemoteFunction") then
            table.insert(Remotes, d)
        end
    end
end

local function renderRemoteList()
    RemoteList:ClearAllChildren()
    UIList.Parent = RemoteList
    for _, r in ipairs(Remotes) do
        if Search.Text == "" or r.Name:lower():find(Search.Text:lower()) then
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(1, -10, 0, 25)
            btn.BackgroundColor3 = Color3.fromRGB(50,50,50)
            btn.TextColor3 = Color3.fromRGB(255,255,255)
            btn.TextXAlignment = Enum.TextXAlignment.Left
            btn.Font = Enum.Font.Gotham
            btn.TextSize = 12
            btn.Text = safe("<Remote>", function() return r:GetFullName() end)
            btn.Parent = RemoteList
        end
    end
    RemoteList.CanvasSize = UDim2.new(0,0,0,UIList.AbsoluteContentSize.Y+5)
end

-- initial build
rebuildRemoteCache()
renderRemoteList()

-- realtime update
RS.DescendantAdded:Connect(function(obj)
    if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
        table.insert(Remotes, obj)
        renderRemoteList()
    end
end)
RS.DescendantRemoving:Connect(function(obj)
    if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
        for i=#Remotes,1,-1 do
            if Remotes[i] == obj then
                table.remove(Remotes, i)
            end
        end
        renderRemoteList()
    end
end)

Search:GetPropertyChangedSignal("Text"):Connect(renderRemoteList)

-- ====== Data Tab ======
local DataTab = AddTab("Data")

local Toolbar = Instance.new("Frame")
Toolbar.Size = UDim2.new(1, -10, 0, 25)
Toolbar.Position = UDim2.new(0, 5, 0, 5)
Toolbar.BackgroundColor3 = Color3.fromRGB(35,35,35)
Toolbar.Parent = DataTab

local BackBtn = Instance.new("TextButton")
BackBtn.Size = UDim2.new(0, 60, 1, 0)
BackBtn.Text = "< Back"
BackBtn.TextColor3 = Color3.fromRGB(255,255,255)
BackBtn.BackgroundColor3 = Color3.fromRGB(70,70,100)
BackBtn.Parent = Toolbar

local CopyBtn = Instance.new("TextButton")
CopyBtn.Size = UDim2.new(0, 60, 1, 0)
CopyBtn.Position = UDim2.new(0, 65, 0, 0)
CopyBtn.Text = "Copy"
CopyBtn.TextColor3 = Color3.fromRGB(255,255,255)
CopyBtn.BackgroundColor3 = Color3.fromRGB(70,70,70)
CopyBtn.Parent = Toolbar

local ClearBtn = Instance.new("TextButton")
ClearBtn.Size = UDim2.new(0, 60, 1, 0)
ClearBtn.Position = UDim2.new(0, 130, 0, 0)
ClearBtn.Text = "Clear"
ClearBtn.TextColor3 = Color3.fromRGB(255,255,255)
ClearBtn.BackgroundColor3 = Color3.fromRGB(100,60,60)
ClearBtn.Parent = Toolbar

local DataLog = Instance.new("ScrollingFrame")
DataLog.Size = UDim2.new(1, -10, 1, -40)
DataLog.Position = UDim2.new(0, 5, 0, 35)
DataLog.BackgroundTransparency = 1
DataLog.ScrollBarThickness = 6
DataLog.Parent = DataTab

local LogList = Instance.new("UIListLayout")
LogList.Padding = UDim.new(0, 8)
LogList.SortOrder = Enum.SortOrder.LayoutOrder
LogList.Parent = DataLog

local Logs = {}

local function addLine(text)
    local lbl = Instance.new("TextLabel")
    lbl.BackgroundTransparency = 1
    lbl.Size = UDim2.new(1, -10, 0, 0)
    lbl.AutomaticSize = Enum.AutomaticSize.Y
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.TextYAlignment = Enum.TextYAlignment.Top
    lbl.TextWrapped = true
    lbl.Font = Enum.Font.Code
    lbl.TextSize = 12
    lbl.TextColor3 = Color3.fromRGB(255,255,255)
    lbl.Text = text
    lbl.Parent = DataLog

    -- auto-scroll ke bawah
    task.defer(function()
        DataLog.CanvasSize = UDim2.new(0,0,0,LogList.AbsoluteContentSize.Y+10)
        DataLog.CanvasPosition = Vector2.new(0, math.max(0, DataLog.CanvasSize.Y.Offset - DataLog.AbsoluteWindowSize.Y + 4))
    end)
end

local function logOutbound(remote, method, args)
    local header = string.format("[%s] %s (%s)", remote.ClassName, safe("<Remote>", function() return remote:GetFullName() end), method)
    local lines = { header, "Args:" }
    for i, a in ipairs(args) do
        table.insert(lines, string.format("  [%d] %s", i, brief(a)))
    end
    table.insert(lines, "-----------------------")

    local msg = table.concat(lines, "\n")
    table.insert(Logs, msg)
    addLine(msg)
end

-- tombol toolbar
BackBtn.MouseButton1Click:Connect(function()
    Tabs["Data"].Visible = false
    Tabs["Rescan"].Visible = true
end)

CopyBtn.MouseButton1Click:Connect(function()
    if setclipboard then
        setclipboard(table.concat(Logs, "\n"))
    end
end)

ClearBtn.MouseButton1Click:Connect(function()
    table.clear(Logs)
    for _, c in ipairs(DataLog:GetChildren()) do
        if c:IsA("TextLabel") then c:Destroy() end
    end
    DataLog.CanvasSize = UDim2.new(0,0,0,0)
end)

-- ====== Local-only hooks (Outbound) ======
-- __namecall to catch r:FireServer(...) and r:InvokeServer(...)
local canHook = getrawmetatable and setreadonly and getnamecallmethod and newcclosure
if canHook then
    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    local oldInvokeServer

    local okRO = pcall(function() setreadonly(mt, false) end)
    if okRO then
        mt.__namecall = newcclosure(function(self, ...)
            local method = getnamecallmethod()
            if typeof(self) == "Instance" then
                if method == "FireServer" and self:IsA("RemoteEvent") then
                    local args = {...}
                    safe(nil, logOutbound, self, "FireServer", args)
                elseif method == "InvokeServer" and self:IsA("RemoteFunction") then
                    local args = {...}
                    safe(nil, logOutbound, self, "InvokeServer", args)
                end
            end
            return oldNamecall(self, ...)
        end)
        setreadonly(mt, true)
    end

    -- fallback: direct InvokeServer calls (rare but possible)
    if hookfunction then
        local rf = Instance.new("RemoteFunction")
        if rf.InvokeServer then
            oldInvokeServer = hookfunction(rf.InvokeServer, function(self, ...)
                if typeof(self) == "Instance" and self:IsA("RemoteFunction") then
                    local args = {...}
                    safe(nil, logOutbound, self, "InvokeServer*", args)
                end
                return oldInvokeServer(self, ...)
            end)
        end
        rf:Destroy()
    end
else
    -- lingkungan tanpa metatable tools: tampilkan notice
    addLine("[Info] Eksploit tidak mendukung __namecall hook. Outbound log mungkin terbatas.")
end
